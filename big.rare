
(declare-rare-rule arith-elim-gt ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :args (t1 s1)
  :conclusion (= (> t1 s1) (not (>= s1 t1)))
)
(declare-rare-rule arith-elim-lt ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :args (t1 s1)
  :conclusion (= (< t1 s1) (not (>= t1 s1)))
)
(declare-rare-rule arith-elim-int-gt ((t1 Int) (s1 Int))
  :args (t1 s1)
  :conclusion (= (> t1 s1) (>= t1 (+ s1 1)))
)
(declare-rare-rule arith-elim-int-lt ((t1 Int) (s1 Int))
  :args (t1 s1)
  :conclusion (= (< t1 s1) (>= s1 (+ t1 1)))
)
(declare-rare-rule arith-elim-leq ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :args (t1 s1)
  :conclusion (= (<= t1 s1) (>= s1 t1))
)
(declare-rare-rule arith-leq-norm ((t1 Int) (s1 Int))
  :args (t1 s1)
  :conclusion (= (<= t1 s1) (not (>= t1 (+ s1 1))))
)
(declare-rare-rule arith-geq-tighten ((t1 Int) (s1 Int))
  :args (t1 s1)
  :conclusion (= (not (>= t1 s1)) (>= s1 (+ t1 1)))
)
(declare-rare-rule arith-geq-norm1-int ((t1 Int) (s1 Int))
  :args (t1 s1)
  :conclusion (= (>= t1 s1) (>= (- t1 s1) 0))
)
(declare-rare-rule arith-geq-norm1-real ((t1 Real) (s1 Real))
  :args (t1 s1)
  :conclusion (= (>= t1 s1) (>= (- t1 s1) 0/1))
)
(declare-rare-rule arith-eq-elim-real ((t1 Real) (s1 Real))
  :args (t1 s1)
  :conclusion (= (= t1 s1) (and (>= t1 s1) (<= t1 s1)))
)
(declare-rare-rule arith-eq-elim-int ((t1 Int) (s1 Int))
  :args (t1 s1)
  :conclusion (= (= t1 s1) (and (>= t1 s1) (<= t1 s1)))
)
(declare-rare-rule arith-to-int-elim-to-real ((@T0 Type) (x1 @T0))
  :args (x1)
  :conclusion (= (to_int (to_real x1)) (to_int x1))
)
(declare-rare-rule arith-div-elim-to-real1 ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :args (x1 y1)
  :conclusion (= (/ (to_real x1) y1) (/ x1 y1))
)
(declare-rare-rule arith-div-elim-to-real2 ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :args (x1 y1)
  :conclusion (= (/ x1 (to_real y1)) (/ x1 y1))
)
(declare-rare-rule arith-int-eq-conflict ((t1 Int) (c1 Real))
  :premises ((= (= (to_real (to_int c1)) c1) false))
  :args (t1 c1)
  :conclusion (= (= (to_real t1) c1) false)
)
(declare-rare-rule arith-int-geq-tighten ((t1 Int) (c1 Real) (cc1 Int))
  :premises ((= (= (to_real (to_int c1)) c1) false) (= cc1 (+ (to_int c1) 1)))
  :args (t1 c1 cc1)
  :conclusion (= (>= (to_real t1) c1) (>= t1 cc1))
)
(declare-rare-rule arith-abs-eq ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :args (x1 y1)
  :conclusion (= (= (abs x1) (abs y1)) (or (= x1 y1) (= x1 (- y1))))
)
(declare-rare-rule arith-abs-int-gt ((x1 Int) (y1 Int))
  :args (x1 y1)
  :conclusion (= (> (abs x1) (abs y1)) (let ((_let_1 (- y1))) (let ((_let_2 (- x1))) (let ((_let_3 (>= y1 0))) (ite (>= x1 0) (ite _let_3 (> x1 y1) (> x1 _let_1)) (ite _let_3 (> _let_2 y1) (> _let_2 _let_1)))))))
)
(declare-rare-rule arith-abs-real-gt ((x1 Int) (y1 Int))
  :args (x1 y1)
  :conclusion (= (> (abs x1) (abs y1)) (let ((_let_1 (- y1))) (let ((_let_2 (- x1))) (let ((_let_3 (>= y1 0/1))) (ite (>= x1 0/1) (ite _let_3 (> x1 y1) (> x1 _let_1)) (ite _let_3 (> _let_2 y1) (> _let_2 _let_1)))))))
)
(declare-rare-rule arith-geq-ite-lift ((@T0 Type) (@T1 Type) (@T2 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :args (C1 t1 s1 r1)
  :conclusion (= (>= (ite C1 t1 s1) r1) (ite C1 (>= t1 r1) (>= s1 r1)))
)
(declare-rare-rule arith-leq-ite-lift ((@T0 Type) (@T1 Type) (@T2 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :args (C1 t1 s1 r1)
  :conclusion (= (<= (ite C1 t1 s1) r1) (ite C1 (<= t1 r1) (<= s1 r1)))
)
(declare-rare-rule arith-min-lt1 ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :args (t1 s1)
  :conclusion (= (<= (ite (< t1 s1) t1 s1) t1) true)
)
(declare-rare-rule arith-min-lt2 ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :args (t1 s1)
  :conclusion (= (<= (ite (< t1 s1) t1 s1) s1) true)
)
(declare-rare-rule arith-max-geq1 ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :args (t1 s1)
  :conclusion (= (>= (ite (>= t1 s1) t1 s1) t1) true)
)
(declare-rare-rule arith-max-geq2 ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :args (t1 s1)
  :conclusion (= (>= (ite (>= t1 s1) t1 s1) s1) true)
)
(declare-rare-rule array-read-over-write ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (t1 (Array @T0 @T1)) (i1 @T2) (e1 @T3))
  :args (t1 i1 e1)
  :conclusion (= (select (store t1 i1 e1) i1) e1)
)
(declare-rare-rule array-read-over-write2 ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (t1 (Array @T0 @T1)) (i1 @T2) (j1 @T3) (e1 @T4))
  :premises ((= (= i1 j1) false))
  :args (t1 i1 j1 e1)
  :conclusion (= (select (store t1 i1 e1) j1) (select t1 j1))
)
(declare-rare-rule array-store-overwrite ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (t1 (Array @T0 @T1)) (i1 @T2) (e1 @T3) (f1 @T4))
  :args (t1 i1 e1 f1)
  :conclusion (= (store (store t1 i1 e1) i1 f1) (store t1 i1 f1))
)
(declare-rare-rule array-store-self ((@T0 Type) (@T1 Type) (@T2 Type) (t1 (Array @T0 @T1)) (i1 @T2))
  :args (t1 i1)
  :conclusion (= (store t1 i1 (select t1 i1)) t1)
)
(declare-rare-rule array-read-over-write-split ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (t1 (Array @T0 @T1)) (i1 @T2) (e1 @T3) (j1 @T4))
  :args (t1 i1 e1 j1)
  :conclusion (= (select (store t1 j1 e1) i1) (ite (= i1 j1) e1 (select t1 i1)))
)
(declare-rare-rule array-store-swap ((@T0 Type) (@T1 Type) (@T2 Type) (@T3 Type) (@T4 Type) (@T5 Type) (t1 (Array @T0 @T1)) (i1 @T2) (j1 @T3) (e1 @T4) (f1 @T5))
  :premises ((= (= i1 j1) false))
  :args (t1 i1 j1 e1 f1)
  :conclusion (= (store (store t1 i1 e1) j1 f1) (store (store t1 j1 f1) i1 e1))
)
(declare-rare-rule bool-double-not-elim ((t1 Bool))
  :args (t1)
  :conclusion (= (not (not t1)) t1)
)
(declare-rare-rule bool-not-true ((t1 Bool))
  :premises ((= t1 false))
  :args (t1)
  :conclusion (= (not t1) true)
)
(declare-rare-rule bool-not-false ((t1 Bool))
  :premises ((= t1 true))
  :args (t1)
  :conclusion (= (not t1) false)
)
(declare-rare-rule bool-eq-true ((t1 Bool))
  :args (t1)
  :conclusion (= (= t1 true) t1)
)
(declare-rare-rule bool-eq-false ((t1 Bool))
  :args (t1)
  :conclusion (= (= t1 false) (not t1))
)
(declare-rare-rule bool-eq-nrefl ((x1 Bool))
  :args (x1)
  :conclusion (= (= x1 (not x1)) false)
)
(declare-rare-rule bool-impl-false1 ((t1 Bool))
  :args (t1)
  :conclusion (= (=> t1 false) (not t1))
)
(declare-rare-rule bool-impl-false2 ((t1 Bool))
  :args (t1)
  :conclusion (= (=> false t1) true)
)
(declare-rare-rule bool-impl-true1 ((t1 Bool))
  :args (t1)
  :conclusion (= (=> t1 true) true)
)
(declare-rare-rule bool-impl-true2 ((t1 Bool))
  :args (t1)
  :conclusion (= (=> true t1) t1)
)
(declare-rare-rule bool-impl-elim ((t1 Bool) (s1 Bool))
  :args (t1 s1)
  :conclusion (= (=> t1 s1) (or (not t1) s1))
)
(declare-rare-rule bool-dual-impl-eq ((t1 Bool) (s1 Bool))
  :args (t1 s1)
  :conclusion (= (and (=> t1 s1) (=> s1 t1)) (= t1 s1))
)
(declare-rare-rule bool-and-conf ((xs1 Bool :list) (w1 Bool) (ys1 Bool :list) (zs1 Bool :list))
  :args (xs1 w1 ys1 zs1)
  :conclusion (= (and xs1 w1 ys1 (not w1) zs1) false)
)
(declare-rare-rule bool-and-conf2 ((xs1 Bool :list) (w1 Bool) (ys1 Bool :list) (zs1 Bool :list))
  :args (xs1 w1 ys1 zs1)
  :conclusion (= (and xs1 (not w1) ys1 w1 zs1) false)
)
(declare-rare-rule bool-or-taut ((xs1 Bool :list) (w1 Bool) (ys1 Bool :list) (zs1 Bool :list))
  :args (xs1 w1 ys1 zs1)
  :conclusion (= (or xs1 w1 ys1 (not w1) zs1) true)
)
(declare-rare-rule bool-or-taut2 ((xs1 Bool :list) (w1 Bool) (ys1 Bool :list) (zs1 Bool :list))
  :args (xs1 w1 ys1 zs1)
  :conclusion (= (or xs1 (not w1) ys1 w1 zs1) true)
)
(declare-rare-rule bool-implies-de-morgan ((x1 Bool) (y1 Bool))
  :args (x1 y1)
  :conclusion (= (not (=> x1 y1)) (and x1 (not y1)))
)
(declare-rare-rule bool-xor-refl ((x1 Bool))
  :args (x1)
  :conclusion (= (xor x1 x1) false)
)
(declare-rare-rule bool-xor-nrefl ((x1 Bool))
  :args (x1)
  :conclusion (= (xor x1 (not x1)) true)
)
(declare-rare-rule bool-xor-false ((x1 Bool))
  :args (x1)
  :conclusion (= (xor x1 false) x1)
)
(declare-rare-rule bool-xor-true ((x1 Bool))
  :args (x1)
  :conclusion (= (xor x1 true) (not x1))
)
(declare-rare-rule bool-xor-comm ((x1 Bool) (y1 Bool))
  :args (x1 y1)
  :conclusion (= (xor x1 y1) (xor y1 x1))
)
(declare-rare-rule bool-xor-elim ((x1 Bool) (y1 Bool))
  :args (x1 y1)
  :conclusion (= (xor x1 y1) (= (not x1) y1))
)
(declare-rare-rule bool-not-xor-elim ((x1 Bool) (y1 Bool))
  :args (x1 y1)
  :conclusion (= (not (xor x1 y1)) (= x1 y1))
)
(declare-rare-rule bool-not-eq-elim1 ((x1 Bool) (y1 Bool))
  :args (x1 y1)
  :conclusion (= (not (= x1 y1)) (= (not x1) y1))
)
(declare-rare-rule bool-not-eq-elim2 ((x1 Bool) (y1 Bool))
  :args (x1 y1)
  :conclusion (= (not (= x1 y1)) (= x1 (not y1)))
)
(declare-rare-rule ite-neg-branch ((c1 Bool) (x1 Bool) (y1 Bool))
  :premises ((= (not y1) x1))
  :args (c1 x1 y1)
  :conclusion (= (ite c1 x1 y1) (= c1 x1))
)
(declare-rare-rule ite-then-true ((c1 Bool) (x1 Bool))
  :args (c1 x1)
  :conclusion (= (ite c1 true x1) (or c1 x1))
)
(declare-rare-rule ite-else-false ((c1 Bool) (x1 Bool))
  :args (c1 x1)
  :conclusion (= (ite c1 x1 false) (and c1 x1))
)
(declare-rare-rule ite-then-false ((c1 Bool) (x1 Bool))
  :args (c1 x1)
  :conclusion (= (ite c1 false x1) (and (not c1) x1))
)
(declare-rare-rule ite-else-true ((c1 Bool) (x1 Bool))
  :args (c1 x1)
  :conclusion (= (ite c1 x1 true) (or (not c1) x1))
)
(declare-rare-rule ite-then-lookahead-self ((c1 Bool) (x1 Bool))
  :args (c1 x1)
  :conclusion (= (ite c1 c1 x1) (ite c1 true x1))
)
(declare-rare-rule ite-else-lookahead-self ((c1 Bool) (x1 Bool))
  :args (c1 x1)
  :conclusion (= (ite c1 x1 c1) (ite c1 x1 false))
)
(declare-rare-rule ite-then-lookahead-not-self ((c1 Bool) (x1 Bool))
  :args (c1 x1)
  :conclusion (= (ite c1 (not c1) x1) (ite c1 false x1))
)
(declare-rare-rule ite-else-lookahead-not-self ((c1 Bool) (x1 Bool))
  :args (c1 x1)
  :conclusion (= (ite c1 x1 (not c1)) (ite c1 x1 true))
)
(declare-rare-rule ite-expand ((c1 Bool) (x1 Bool) (y1 Bool))
  :args (c1 x1 y1)
  :conclusion (= (ite c1 x1 y1) (and (or (not c1) x1) (or c1 y1)))
)
(declare-rare-rule bool-not-ite-elim ((c1 Bool) (x1 Bool) (y1 Bool))
  :args (c1 x1 y1)
  :conclusion (= (not (ite c1 x1 y1)) (ite c1 (not x1) (not y1)))
)
(declare-rare-rule ite-true-cond ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :args (x1 y1)
  :conclusion (= (ite true x1 y1) x1)
)
(declare-rare-rule ite-false-cond ((@T0 Type) (@T1 Type) (x1 @T0) (y1 @T1))
  :args (x1 y1)
  :conclusion (= (ite false x1 y1) y1)
)
(declare-rare-rule ite-not-cond ((@T0 Type) (@T1 Type) (c1 Bool) (x1 @T0) (y1 @T1))
  :args (c1 x1 y1)
  :conclusion (= (ite (not c1) x1 y1) (ite c1 y1 x1))
)
(declare-rare-rule ite-eq-branch ((@T0 Type) (c1 Bool) (x1 @T0))
  :args (c1 x1)
  :conclusion (= (ite c1 x1 x1) x1)
)
(declare-rare-rule ite-then-lookahead ((@T0 Type) (@T1 Type) (@T2 Type) (c1 Bool) (x1 @T0) (y1 @T1) (z1 @T2))
  :args (c1 x1 y1 z1)
  :conclusion (= (ite c1 (ite c1 x1 y1) z1) (ite c1 x1 z1))
)
(declare-rare-rule ite-else-lookahead ((@T0 Type) (@T1 Type) (@T2 Type) (c1 Bool) (x1 @T0) (y1 @T1) (z1 @T2))
  :args (c1 x1 y1 z1)
  :conclusion (= (ite c1 x1 (ite c1 y1 z1)) (ite c1 x1 z1))
)
(declare-rare-rule ite-then-neg-lookahead ((@T0 Type) (@T1 Type) (@T2 Type) (c1 Bool) (x1 @T0) (y1 @T1) (z1 @T2))
  :args (c1 x1 y1 z1)
  :conclusion (= (ite c1 (ite (not c1) x1 y1) z1) (ite c1 y1 z1))
)
(declare-rare-rule ite-else-neg-lookahead ((@T0 Type) (@T1 Type) (@T2 Type) (c1 Bool) (x1 @T0) (y1 @T1) (z1 @T2))
  :args (c1 x1 y1 z1)
  :conclusion (= (ite c1 x1 (ite (not c1) y1 z1)) (ite c1 x1 y1))
)
(declare-rare-rule bv-not-xor ((@n0 Int) (@n1 Int) (@n2 Int) (x1 (BitVec @n0)) (x2 (BitVec @n1)) (xs1 (BitVec @n2) :list))
  :args (x1 x2 xs1)
  :conclusion (= (bvnot (bvxor x1 x2 xs1)) (bvxor (bvnot x1) x2 xs1))
)
(declare-rare-rule bv-and-simplify-1 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (xs1 (BitVec @n0) :list) (ys1 (BitVec @n1) :list) (zs1 (BitVec @n2) :list) (x1 (BitVec @n3)) (w1 Int))
  :premises ((= w1 (@bvsize x1)))
  :args (xs1 ys1 zs1 x1 w1)
  :conclusion (= (bvand xs1 (bvnot x1) ys1 x1 zs1) (@bv 0 w1))
)
(declare-rare-rule bv-and-simplify-2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (xs1 (BitVec @n0) :list) (ys1 (BitVec @n1) :list) (zs1 (BitVec @n2) :list) (x1 (BitVec @n3)) (w1 Int))
  :premises ((= w1 (@bvsize x1)))
  :args (xs1 ys1 zs1 x1 w1)
  :conclusion (= (bvand xs1 x1 ys1 (bvnot x1) zs1) (@bv 0 w1))
)
(declare-rare-rule bv-or-simplify-1 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (xs1 (BitVec @n0) :list) (ys1 (BitVec @n1) :list) (zs1 (BitVec @n2) :list) (x1 (BitVec @n3)) (w1 Int))
  :premises ((= w1 (@bvsize x1)))
  :args (xs1 ys1 zs1 x1 w1)
  :conclusion (= (bvor xs1 (bvnot x1) ys1 x1 zs1) (bvnot (@bv 0 w1)))
)
(declare-rare-rule bv-or-simplify-2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (xs1 (BitVec @n0) :list) (ys1 (BitVec @n1) :list) (zs1 (BitVec @n2) :list) (x1 (BitVec @n3)) (w1 Int))
  :premises ((= w1 (@bvsize x1)))
  :args (xs1 ys1 zs1 x1 w1)
  :conclusion (= (bvor xs1 x1 ys1 (bvnot x1) zs1) (bvnot (@bv 0 w1)))
)
(declare-rare-rule bv-commutative-xor ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvxor x1 y1) (bvxor y1 x1))
)
(declare-rare-rule bv-commutative-comp ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvcomp x1 y1) (bvcomp y1 x1))
)
(declare-rare-rule bv-not-neq ((@n0 Int) (x1 (BitVec @n0)))
  :premises ((= (> (@bvsize x1) 0) true))
  :args (x1)
  :conclusion (= (= x1 (bvnot x1)) false)
)

(declare-rare-rule bv-commutative-add ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvadd x1 y1) (bvadd y1 x1))
)
(declare-rare-rule bv-sub-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvsub x1 y1) (bvadd x1 (bvneg y1)))
)
(declare-rare-rule bv-ite-width-one ((@n0 Int) (x1 (BitVec @n0)))
  :args (x1)
  :conclusion (= (let ((_let_1 (@bv 1 1))) (ite (= x1 _let_1) _let_1 (@bv 0 1))) x1)
)
(declare-rare-rule bv-ite-width-one-not ((@n0 Int) (x1 (BitVec @n0)))
  :args (x1)
  :conclusion (= (let ((_let_1 (@bv 0 1))) (ite (= x1 _let_1) (@bv 1 1) _let_1)) (bvnot x1))
)
(declare-rare-rule bv-eq-xor-solve ((@n0 Int) (@n1 Int) (@n2 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)) (z1 (BitVec @n2)))
  :args (x1 y1 z1)
  :conclusion (= (= (= (bvxor x1 y1) z1) (= x1 (bvxor z1 y1))) true)
)
(declare-rare-rule bv-eq-not-solve ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (= (= (bvnot x1) y1) (= x1 (bvnot y1))) true)
)
(declare-rare-rule bv-ugt-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvugt x1 y1) (bvult y1 x1))
)
(declare-rare-rule bv-uge-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvuge x1 y1) (bvule y1 x1))
)
(declare-rare-rule bv-sgt-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvsgt x1 y1) (bvslt y1 x1))
)
(declare-rare-rule bv-sge-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvsge x1 y1) (bvsle y1 x1))
)
(declare-rare-rule bv-sle-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvsle x1 y1) (not (bvslt y1 x1)))
)
(declare-rare-rule bv-ule-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvule x1 y1) (not (bvult y1 x1)))
)
(declare-rare-rule bv-comp-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvcomp x1 y1) (ite (= x1 y1) (@bv 1 1) (@bv 0 1)))
)
(declare-rare-rule bv-nand-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvnand x1 y1) (bvnot (bvand x1 y1)))
)
(declare-rare-rule bv-nor-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvnor x1 y1) (bvnot (bvor x1 y1)))
)
(declare-rare-rule bv-xnor-eliminate ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvxnor x1 y1) (bvnot (bvxor x1 y1)))
)
(declare-rare-rule bv-shl-by-const-0 ((@n0 Int) (x1 (BitVec @n0)) (sz1 Int))
  :args (x1 sz1)
  :conclusion (= (bvshl x1 (@bv 0 sz1)) x1)
)
(declare-rare-rule bv-shl-by-const-2 ((@n0 Int) (x1 (BitVec @n0)) (amount1 Int) (sz1 Int) (w1 Int))
  :premises ((= (>= amount1 (@bvsize x1)) true) (= w1 (@bvsize x1)))
  :args (x1 amount1 sz1 w1)
  :conclusion (= (bvshl x1 (@bv amount1 sz1)) (@bv 0 w1))
)
(declare-rare-rule bv-lshr-by-const-0 ((@n0 Int) (x1 (BitVec @n0)) (sz1 Int))
  :args (x1 sz1)
  :conclusion (= (bvlshr x1 (@bv 0 sz1)) x1)
)
(declare-rare-rule bv-lshr-by-const-2 ((@n0 Int) (x1 (BitVec @n0)) (amount1 Int) (sz1 Int))
  :premises ((= (>= amount1 (@bvsize x1)) true))
  :args (x1 amount1 sz1)
  :conclusion (= (bvlshr x1 (@bv amount1 sz1)) (@bv 0 sz1))
)
(declare-rare-rule bv-ashr-by-const-0 ((@n0 Int) (x1 (BitVec @n0)) (sz1 Int))
  :args (x1 sz1)
  :conclusion (= (bvashr x1 (@bv 0 sz1)) x1)
)
(declare-rare-rule bv-xor-duplicate ((@n0 Int) (x1 (BitVec @n0)) (w1 Int))
  :premises ((= w1 (@bvsize x1)))
  :args (x1 w1)
  :conclusion (= (bvxor x1 x1) (@bv 0 w1))
)
(declare-rare-rule bv-xor-not ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (bvxor (bvnot x1) (bvnot y1)) (bvxor x1 y1))
)
(declare-rare-rule bv-not-idemp ((@n0 Int) (x1 (BitVec @n0)))
  :args (x1)
  :conclusion (= (bvnot (bvnot x1)) x1)
)
(declare-rare-rule bv-ult-zero-1 ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :args (x1 n1)
  :conclusion (= (bvult (@bv 0 n1) x1) (not (= x1 (@bv 0 n1))))
)
(declare-rare-rule bv-ult-zero-2 ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :args (x1 n1)
  :conclusion (= (bvult x1 (@bv 0 n1)) false)
)
(declare-rare-rule bv-ult-self ((@n0 Int) (x1 (BitVec @n0)))
  :args (x1)
  :conclusion (= (bvult x1 x1) false)
)
(declare-rare-rule bv-lt-self ((@n0 Int) (x1 (BitVec @n0)))
  :args (x1)
  :conclusion (= (bvslt x1 x1) false)
)
(declare-rare-rule bv-ule-self ((@n0 Int) (x1 (BitVec @n0)))
  :args (x1)
  :conclusion (= (bvule x1 x1) true)
)
(declare-rare-rule bv-ule-zero ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :args (x1 n1)
  :conclusion (= (bvule x1 (@bv 0 n1)) (= x1 (@bv 0 n1)))
)
(declare-rare-rule bv-zero-ule ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :args (x1 n1)
  :conclusion (= (bvule (@bv 0 n1) x1) true)
)
(declare-rare-rule bv-sle-self ((@n0 Int) (x1 (BitVec @n0)))
  :args (x1)
  :conclusion (= (bvsle x1 x1) true)
)
(declare-rare-rule bv-not-ult ((@n0 Int) (@n1 Int) (x1 (BitVec @n0)) (y1 (BitVec @n1)))
  :args (x1 y1)
  :conclusion (= (not (bvult x1 y1)) (bvule y1 x1))
)
(declare-rare-rule bv-udiv-zero ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :args (x1 n1)
  :conclusion (= (bvudiv x1 (@bv 0 n1)) (bvnot (@bv 0 n1)))
)
(declare-rare-rule bv-udiv-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :args (x1 n1)
  :conclusion (= (bvudiv x1 (@bv 1 n1)) x1)
)
(declare-rare-rule bv-urem-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :args (x1 n1)
  :conclusion (= (bvurem x1 (@bv 1 n1)) (@bv 0 n1))
)
(declare-rare-rule bv-urem-self ((@n0 Int) (x1 (BitVec @n0)) (w1 Int))
  :premises ((= w1 (@bvsize x1)))
  :args (x1 w1)
  :conclusion (= (bvurem x1 x1) (@bv 0 w1))
)
(declare-rare-rule bv-shl-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :args (a1 n1)
  :conclusion (= (bvshl (@bv 0 n1) a1) (@bv 0 n1))
)
(declare-rare-rule bv-lshr-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :args (a1 n1)
  :conclusion (= (bvlshr (@bv 0 n1) a1) (@bv 0 n1))
)
(declare-rare-rule bv-ashr-zero ((@n0 Int) (a1 (BitVec @n0)) (n1 Int))
  :args (a1 n1)
  :conclusion (= (bvashr (@bv 0 n1) a1) (@bv 0 n1))
)
(declare-rare-rule bv-ugt-urem ((@n0 Int) (@n1 Int) (y1 (BitVec @n0)) (x1 (BitVec @n1)) (w1 Int))
  :premises ((= w1 (@bvsize y1)))
  :args (y1 x1 w1)
  :conclusion (= (bvugt (bvurem y1 x1) x1) (let ((_let_1 (@bv 0 w1))) (and (= x1 _let_1) (bvugt y1 _let_1))))
)
(declare-rare-rule bv-ult-one ((@n0 Int) (x1 (BitVec @n0)) (n1 Int))
  :args (x1 n1)
  :conclusion (= (bvult x1 (@bv 1 n1)) (= x1 (@bv 0 n1)))
)
(declare-rare-rule str-eq-len-false ((x1 String) (y1 String))
  :premises ((= (= (str.len x1) (str.len y1)) false))
  :args (x1 y1)
  :conclusion (= (= x1 y1) false)
)
(declare-rare-rule str-replace-re-none ((@T0 Type) (@T1 Type) (t1 (Seq @T0)) (r1 (Seq @T1)))
  :args (t1 r1)
  :conclusion (= (str.replace_re t1 re.none r1) t1)
)
(declare-rare-rule str-replace-re-all-none ((@T0 Type) (@T1 Type) (t1 (Seq @T0)) (r1 (Seq @T1)))
  :args (t1 r1)
  :conclusion (= (str.replace_re_all t1 re.none r1) t1)
)
(declare-rare-rule str-to-int-concat-neg-one ((s1 String :list) (s2 String) (s3 String :list))
  :premises ((= (str.to_int s2) -1))
  :args (s1 s2 s3)
  :conclusion (= (str.to_int (str.++ s1 s2 s3)) -1)
)
(declare-rare-rule str-leq-empty ((s1 String))
  :args (s1)
  :conclusion (= (str.<= "" s1) true)
)
(declare-rare-rule str-leq-empty-eq ((s1 String))
  :args (s1)
  :conclusion (= (str.<= s1 "") (= s1 ""))
)
(declare-rare-rule str-leq-concat-false ((s1 String :list) (t1 String) (s2 String) (t2 String :list) (s3 String :list))
  :premises ((= (str.len t1) (str.len s2)) (= (str.<= t1 s2) false))
  :args (s1 t1 s2 t2 s3)
  :conclusion (= (str.<= (str.++ s1 t1 t2) (str.++ s1 s2 s3)) false)
)
(declare-rare-rule str-leq-concat-true ((s1 String :list) (t1 String) (s2 String) (t2 String :list) (s3 String :list))
  :premises ((= (str.len t1) (str.len s2)) (= (= t1 s2) false) (= (str.<= t1 s2) true))
  :args (s1 t1 s2 t2 s3)
  :conclusion (= (str.<= (str.++ s1 t1 t2) (str.++ s1 s2 s3)) true)
)
(declare-rare-rule str-leq-concat-base-1 ((t1 String) (t2 String :list) (s1 String))
  :premises ((= (str.len t1) (str.len s1)) (= (= t1 s1) false))
  :args (t1 t2 s1)
  :conclusion (= (str.<= (str.++ t1 t2) s1) (str.<= t1 s1))
)
(declare-rare-rule str-leq-concat-base-2 ((t1 String) (s1 String) (s2 String :list))
  :premises ((= (str.len t1) (str.len s1)) (= (= t1 s1) false))
  :args (t1 s1 s2)
  :conclusion (= (str.<= t1 (str.++ s1 s2)) (str.<= t1 s1))
)
(declare-rare-rule str-lt-elim ((s1 String) (t1 String))
  :args (s1 t1)
  :conclusion (= (str.< s1 t1) (and (not (= s1 t1)) (str.<= s1 t1)))
)
(declare-rare-rule str-from-int-no-ctn-nondigit ((n1 Int) (s1 String))
  :premises ((= (= s1 "") false) (= (str.to_int s1) -1))
  :args (n1 s1)
  :conclusion (= (str.contains (str.from_int n1) s1) false)
)

(declare-rare-rule re-opt-elim ((x1 RegLan))
  :args (x1)
  :conclusion (= (re.opt x1) (re.union (str.to_re "") x1))
)
(declare-rare-rule re-diff-elim ((x1 RegLan) (y1 RegLan))
  :args (x1 y1)
  :conclusion (= (re.diff x1 y1) (re.inter x1 (re.comp y1)))
)
(declare-rare-rule re-plus-elim ((x1 RegLan))
  :args (x1)
  :conclusion (= (re.+ x1) (re.++ x1 (re.* x1)))
)
(declare-rare-rule re-concat-star-swap ((xs1 RegLan :list) (r1 RegLan) (ys1 RegLan :list))
  :args (xs1 r1 ys1)
  :conclusion (= (re.++ xs1 (re.* r1) r1 ys1) (re.++ xs1 r1 (re.* r1) ys1))
)
(declare-rare-rule re-union-all ((xs1 RegLan :list) (ys1 RegLan :list))
  :args (xs1 ys1)
  :conclusion (= (re.union xs1 (re.* re.allchar) ys1) (re.* re.allchar))
)
(declare-rare-rule re-union-const-elim ((r1 RegLan) (s1 String))
  :premises ((= (str.in_re s1 r1) true))
  :args (r1 s1)
  :conclusion (= (re.union (str.to_re s1) r1) r1)
)
(declare-rare-rule re-star-none ()
  :args ()
  :conclusion (= (re.* re.none) (str.to_re ""))
)
(declare-rare-rule re-star-emp ()
  :args ()
  :conclusion (= (re.* (str.to_re "")) (str.to_re ""))
)
(declare-rare-rule re-star-star ((x1 RegLan))
  :args (x1)
  :conclusion (= (re.* (re.* x1)) (re.* x1))
)
(declare-rare-rule re-in-empty ((t1 String))
  :args (t1)
  :conclusion (= (str.in_re t1 re.none) false)
)
(declare-rare-rule re-in-sigma ((t1 String))
  :args (t1)
  :conclusion (= (str.in_re t1 re.allchar) (= (str.len t1) 1))
)
(declare-rare-rule re-in-sigma-star ((t1 String))
  :args (t1)
  :conclusion (= (str.in_re t1 (re.* re.allchar)) true)
)
(declare-rare-rule re-in-cstring ((t1 String) (s1 String))
  :args (t1 s1)
  :conclusion (= (str.in_re t1 (str.to_re s1)) (= t1 s1))
)
(declare-rare-rule re-in-comp ((t1 String) (r1 RegLan))
  :args (t1 r1)
  :conclusion (= (str.in_re t1 (re.comp r1)) (not (str.in_re t1 r1)))
)
(declare-rare-rule str-in-re-range-elim ((s1 String) (c1 String) (c2 String))
  :premises ((= (str.len c1) 1) (= (str.len c2) 1))
  :args (s1 c1 c2)
  :conclusion (= (str.in_re s1 (re.range c1 c2)) (let ((_let_1 (str.to_code s1))) (and (<= (str.to_code c1) _let_1) (<= _let_1 (str.to_code c2)))))
)
(declare-rare-rule str-in-re-contains ((t1 String) (s1 String))
  :args (t1 s1)
  :conclusion (= (let ((_let_1 (re.* re.allchar))) (str.in_re t1 (re.++ _let_1 (str.to_re s1) _let_1))) (str.contains t1 s1))
)
(declare-rare-rule str-in-re-from-int-nemp-dig-range ((n1 Int))
  :premises ((= (>= n1 0) true))
  :args (n1)
  :conclusion (= (let ((_let_1 (re.range "0" "9"))) (str.in_re (str.from_int n1) (re.++ _let_1 (re.* _let_1)))) true)
)
(declare-rare-rule str-in-re-from-int-dig-range ((n1 Int))
  :args (n1)
  :conclusion (= (str.in_re (str.from_int n1) (re.* (re.range "0" "9"))) true)
)
(declare-rare-rule eq-refl ((@T0 Type) (t1 @T0))
  :args (t1)
  :conclusion (= (= t1 t1) true)
)
(declare-rare-rule eq-symm ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :args (t1 s1)
  :conclusion (= (= t1 s1) (= s1 t1))
)
(declare-rare-rule eq-cond-deq ((@T0 Type) (@T1 Type) (@T2 Type) (t1 @T0) (s1 @T1) (r1 @T2))
  :premises ((= (= s1 r1) false))
  :args (t1 s1 r1)
  :conclusion (= (= (= t1 s1) (= t1 r1)) (and (not (= t1 s1)) (not (= t1 r1))))
)
(declare-rare-rule eq-ite-lift ((@T0 Type) (@T1 Type) (@T2 Type) (C1 Bool) (t1 @T0) (s1 @T1) (r1 @T2))
  :args (C1 t1 s1 r1)
  :conclusion (= (= (ite C1 t1 s1) r1) (ite C1 (= t1 r1) (= s1 r1)))
)
(declare-rare-rule distinct-binary-elim ((@T0 Type) (@T1 Type) (t1 @T0) (s1 @T1))
  :args (t1 s1)
  :conclusion (= (distinct t1 s1) (not (= t1 s1)))
)
(declare-rare-rule uf-int2bv-bvult-equiv ((@n0 Int) (@n1 Int) (t1 (BitVec @n0)) (s1 (BitVec @n1)))
  :args (t1 s1)
  :conclusion (= (bvult t1 s1) (< (ubv_to_int t1) (ubv_to_int s1)))
)
(declare-rare-rule uf-int2bv-bvule-equiv ((@n0 Int) (@n1 Int) (t1 (BitVec @n0)) (s1 (BitVec @n1)))
  :args (t1 s1)
  :conclusion (= (bvule t1 s1) (<= (ubv_to_int t1) (ubv_to_int s1)))
)