unsat
(
(assume a0 (not (= f1 f2)))
(assume a1 (not (< 2 (+ (* 4 f3) 1))))
(assume a2 (<= 1 f3))
(step t0 (cl (not (= (<= 1 f3) (>= f3 1))) (not (<= 1 f3)) (>= f3 1)) :rule equiv_pos2)
(step t1 (cl (= (<= 1 f3) (>= f3 1))) :rule rare_rewrite :args ("arith-elim-leq" 1 f3))
(step t2 (cl (>= f3 1)) :rule resolution :premises (t0 t1 a2))
(step t3 (cl (not (= (not (< 2 (+ (* 4 f3) 1))) (not (>= f3 1)))) (not (not (< 2 (+ (* 4 f3) 1)))) (not (>= f3 1))) :rule equiv_pos2)
(step t4 (cl (= (< 2 (+ (* 4 f3) 1)) (not (>= 2 (+ (* 4 f3) 1))))) :rule rare_rewrite :args ("arith-elim-lt" 2 (+ (* 4 f3) 1)))
(step t5 (cl (= 2 2)) :rule refl)
(step t6 (cl (= (+ (* 4 f3) 1) (+ 1 (* 4 f3)))) :rule rare_rewrite :args ("arith-poly-norm"))
(step t7 (cl (= (>= 2 (+ (* 4 f3) 1)) (>= 2 (+ 1 (* 4 f3))))) :rule cong :premises (t5 t6))
(step t8 (cl (= (* 1/4 (to_real (- 2 (+ 1 (* 4 f3))))) (* 1/1 (- (to_real (* -1 f3)) -1/4)))) :rule rare_rewrite :args ("arith-poly-norm"))
(step t9 (cl (= (>= 2 (+ 1 (* 4 f3))) (>= (to_real (* -1 f3)) -1/4))) :rule hole :premises (t8) :args ("ARITH_POLY_NORM_REL" (= (>= 2 (+ 1 (* 4 f3))) (>= (to_real (* -1 f3)) -1/4))))
(step t10 (cl (= (= (to_real (to_int -1/4)) -1/4) false)) :rule rare_rewrite :args ("evaluate"))
(step t11 (cl (= (+ (to_int -1/4) 1) 0)) :rule rare_rewrite :args ("evaluate"))
(step t12 (cl (= 0 (+ (to_int -1/4) 1))) :rule symm :premises (t11))
(step t13 (cl (= (>= (to_real (* -1 f3)) -1/4) (>= (* -1 f3) 0))) :rule rare_rewrite :premises (t10 t12) :args ("arith-int-geq-tighten" (* -1 f3) -1/4 0))
(step t14 (cl (= (not (>= f3 1)) (>= 1 (+ f3 1)))) :rule rare_rewrite :args ("arith-geq-tighten" f3 1))
(step t15 (cl (= (* -1 (- 1 (+ f3 1))) (* -1 (- (* -1 f3) 0)))) :rule rare_rewrite :args ("arith-poly-norm"))
(step t16 (cl (= (>= 1 (+ f3 1)) (>= (* -1 f3) 0))) :rule hole :premises (t15) :args ("ARITH_POLY_NORM_REL" (= (>= 1 (+ f3 1)) (>= (* -1 f3) 0))))
(step t17 (cl (= (not (>= f3 1)) (>= (* -1 f3) 0))) :rule trans :premises (t14 t16))
(step t18 (cl (= (>= (* -1 f3) 0) (not (>= f3 1)))) :rule symm :premises (t17))
(step t19 (cl (= (>= 2 (+ 1 (* 4 f3))) (not (>= f3 1)))) :rule trans :premises (t9 t13 t18))
(step t20 (cl (= (>= 2 (+ (* 4 f3) 1)) (not (>= f3 1)))) :rule trans :premises (t7 t19))
(step t21 (cl (= (not (>= 2 (+ (* 4 f3) 1))) (not (not (>= f3 1))))) :rule cong :premises (t20))
(step t22 (cl (= (not (not (>= f3 1))) (>= f3 1))) :rule rare_rewrite :args ("bool-double-not-elim" (>= f3 1)))
(step t23 (cl (= (not (>= 2 (+ (* 4 f3) 1))) (>= f3 1))) :rule trans :premises (t21 t22))
(step t24 (cl (= (< 2 (+ (* 4 f3) 1)) (>= f3 1))) :rule trans :premises (t4 t23))
(step t25 (cl (= (not (< 2 (+ (* 4 f3) 1))) (not (>= f3 1)))) :rule cong :premises (t24))
(step t26 (cl (not (>= f3 1))) :rule resolution :premises (t3 t25 a1))
(step t27 (cl) :rule resolution :premises (t2 t26))
)